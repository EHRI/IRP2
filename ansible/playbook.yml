---
- hosts: irp2
  become: yes

  vars:
    project_path: /opt/IRP2
    virtualenv_path: /opt/irp2venv

  tasks:
    - name: Add source repository
      apt_repository: repo="deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted" state=present
    - name: Install packages
      apt: pkg={{ item }} state=latest
      with_items:
        - python3
        - python3-dev
        - python3-lxml
        - python-virtualenv
        - python3-pip
        - libz-dev
        - git
        - nginx

    - name: Install Python3 LXML dependencies
      apt: pkg=python3-lxml state=build-dep

    - name: Check if Solr already configured (expensive steps)
      uri: url="http://localhost:8983/solr/location/admin/luke?show=index&wt=json" return_content=yes
      ignore_errors: yes
      register: solr_response

    - fail: msg="Solr is not responding, please address Solr first"
      when: solr_response.status == -1
      #(solr_response.content|from_json)['index']['numDocs'] is defined

    - name: Creating project folder
      file: path="{{ project_path }}" state=directory mode=0755 owner="{{ user }}" group=www-data
      tags: code
      when: vagrant is not defined

    - name: Deploy application code
      copy: src=../../{{ item }} dest={{ project_path }} mode=0755 owner="{{ user }}"
      with_items:
        - archives
        - static
        - templates
        - dashboard.py
        - wsgi.py
        - flask_extended.py
        - requirements.txt
      become: yes
      when: vagrant is not defined
      tags: code

    - name: Deploy instance (no overwrite)
      copy: src=../../instance dest={{ project_path }} mode=0755 force=no
      become: no
      when: vagrant is not defined
      tags: code

    - name: Create virtualenv
      file: path={{ virtualenv_path }} owner={{ user }} group={{ group }} state=directory
    - command: virtualenv --python=/usr/bin/python3 {{ virtualenv_path }}
      become: no

    - name: Install Python package dependencies
      command: "{{ virtualenv_path }}/bin/pip3 install -r {{ project_path }}/requirements.txt"
      become: no

    - name: Edit the virtualenv activate script to set environment variables
      become: no
      lineinfile:
        dest: "{{ virtualenv_path }}/bin/activate"
        insertafter: EOF
        line: "export FLASK_APP={{ project_path }}/dashboard.py"

    - name: Edit the virtualenv activate script to set environment variables
      become: no
      lineinfile:
        dest: "{{ virtualenv_path }}/bin/activate"
        insertafter: EOF
        line: "export GOOGLE_APPLICATION_CREDENTIALS={{ virtualenv_path }}/gcloud_keyfile.json"

    - template: src=venv_exec.j2 dest={{ virtualenv_path }}/bin/exec mode=755
      become: no

    - copy: src={{ gcloud_keyfile }} dest={{ virtualenv_path }}/gcloud_keyfile.json
      become: no

    - name: Initialize DB
      become: no
      command: "{{ virtualenv_path }}/bin/exec flask init_db"

    - include: setup_nginx.yml
      tags: nginx

    - name: Deploy IRP2 (Gunicorn) SystemD Service
      template: src=irp2.service.j2 dest=/etc/systemd/system/irp2.service

    - name: Enable IRP2 (Gunicorn) service
      service: name=irp2.service enabled=yes state=restarted

  handlers:
    - name: restart Nginx
      service: name=nginx state=restarted
